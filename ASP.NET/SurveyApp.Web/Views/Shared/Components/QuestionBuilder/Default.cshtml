
@model SurveyApp.Web.ViewComponents.QuestionBuilderViewModel

<div class="question-builder-container w-full">
    <div class="question-card border rounded-md shadow-sm mb-4" data-question-id="@Model.Question.Id" data-question-index="@Model.Index">
        <div class="flex items-center px-4 py-3 border-b bg-muted/30">
            <div class="mr-2 text-muted-foreground cursor-grab draggable-handle">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="9" cy="12" r="1"/><circle cx="9" cy="5" r="1"/><circle cx="9" cy="19" r="1"/><circle cx="15" cy="12" r="1"/><circle cx="15" cy="5" r="1"/><circle cx="15" cy="19" r="1"/></svg>
            </div>
            <button type="button" class="toggle-question-btn p-0 h-auto mr-2" onclick="toggleQuestionExpand(this)">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 15l7-7 7 7"/></svg>
            </button>
            <div class="flex-1 font-medium truncate question-title-display">
                @(string.IsNullOrEmpty(Model.Question.Title) ? "Untitled Question" : Model.Question.Title)
            </div>
            <div class="flex items-center gap-1">
                @if (!Model.IsFirst)
                {
                    <button type="button" class="move-up-btn text-gray-500 hover:text-gray-700 p-1 rounded-full" title="Move Up">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 19V5M5 12l7-7 7 7"/></svg>
                    </button>
                }
                @if (!Model.IsLast)
                {
                    <button type="button" class="move-down-btn text-gray-500 hover:text-gray-700 p-1 rounded-full" title="Move Down">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 5v14M5 12l7 7 7-7"/></svg>
                    </button>
                }
                <button type="button" class="delete-question-btn text-gray-500 hover:text-red-500 p-1 rounded-full" title="Delete Question">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/></svg>
                </button>
            </div>
        </div>

        <div class="question-content p-4 space-y-4 animate-slide-down">
            <div class="space-y-2">
                <div>
                    <label for="question-@Model.Question.Id-title" class="block text-sm font-medium mb-1">Question</label>
                    <input type="text" id="question-@Model.Question.Id-title" name="Questions[@Model.Index].Text" 
                           value="@Model.Question.Title" 
                           class="question-title-input w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" 
                           placeholder="Enter your question" />
                    <input type="hidden" name="Questions[@Model.Index].Id" value="@Model.Question.Id" />
                </div>
                
                <div>
                    <label for="question-@Model.Question.Id-description" class="block text-sm font-medium mb-1">Description (optional)</label>
                    <textarea id="question-@Model.Question.Id-description" name="Questions[@Model.Index].Description" 
                              class="question-description-input w-full px-3 py-2 border border-gray-300 rounded-md min-h-[80px] focus:outline-none focus:ring-2 focus:ring-primary" 
                              placeholder="Add a description to provide more context">@Model.Question.Description</textarea>
                </div>
            </div>

            <div>
                <div class="question-type-toggle w-full border border-gray-300 rounded-md p-2 flex justify-between items-center cursor-pointer">
                    <span>Question Type: <span class="font-medium question-type-display">@Model.Question.Type.Replace("-", " ")</span></span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M6 9l6 6 6-6"/></svg>
                </div>
                <div class="question-types-dropdown hidden mt-2 border rounded-md shadow-sm bg-white p-2 space-y-1">
                    @foreach (var type in new[] { "text", "textarea", "multiple-choice", "single-choice", "dropdown", "rating", "nps" })
                    {
                        <div class="question-type-option @(Model.Question.Type == type ? "selected" : "")" data-type="@type">
                            <div class="flex items-center p-2 hover:bg-gray-100 rounded cursor-pointer">
                                <input type="radio" name="Questions[@Model.Index].Type" value="@type" id="type-@Model.Question.Id-@type" @(Model.Question.Type == type ? "checked" : "") class="mr-2 question-type-radio" />
                                <label for="type-@Model.Question.Id-@type" class="flex-1 cursor-pointer capitalize">@type.Replace("-", " ")</label>
                            </div>
                        </div>
                    }
                </div>
                <input type="hidden" class="current-question-type" name="Questions[@Model.Index].Type" value="@Model.Question.Type" />
            </div>

            <div class="question-options-container @(new[] { "multiple-choice", "single-choice", "dropdown", "ranking" }.Contains(Model.Question.Type) ? "" : "hidden")">
                <label class="block text-sm font-medium mb-2">Options</label>
                @if (Model.Question.Options != null)
                {
                    for (var i = 0; i < Model.Question.Options.Count; i++)
                    {
                        <div class="option-item flex items-center gap-2 mb-2">
                            <div class="flex-1">
                                <input type="text" name="Questions[@Model.Index].Options[@i]" value="@Model.Question.Options[i]" 
                                       class="option-input w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" 
                                       placeholder="Option @(i + 1)" />
                            </div>
                            <button type="button" class="option-remove text-gray-500 hover:text-red-500 p-1 rounded-full @(Model.Question.Options.Count <= 2 ? "opacity-50 cursor-not-allowed" : "")" 
                                    @(Model.Question.Options.Count <= 2 ? "disabled" : "") title="Remove Option">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/></svg>
                            </button>
                        </div>
                    }
                }
                <button type="button" class="add-option-btn mt-2 inline-flex items-center text-sm text-primary hover:text-primary-dark px-3 py-1 rounded border border-primary/20 hover:border-primary/40 bg-primary/5">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M12 5v14M5 12h14"/></svg>
                    Add Option
                </button>
            </div>

            <div class="question-preview-container @(new[] { "rating", "nps" }.Contains(Model.Question.Type) ? "" : "hidden")">
                <label class="block text-sm font-medium mb-2">Preview</label>
                @if (Model.Question.Type == "rating")
                {
                    <div class="rating-preview flex gap-1">
                        @for (var i = 1; i <= 5; i++)
                        {
                            <div class="star @(i <= 3 ? "text-yellow-400" : "text-gray-300")">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="@(i <= 3 ? "currentColor" : "none")" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/></svg>
                            </div>
                        }
                    </div>
                }
                else if (Model.Question.Type == "nps")
                {
                    <div class="nps-preview">
                        <div class="grid grid-cols-11 gap-1">
                            @for (var i = 0; i <= 10; i++)
                            {
                                <div class="nps-option text-center py-2 border rounded-md cursor-pointer @(i == 7 ? "bg-primary/10 border-primary" : "")">@i</div>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="flex items-center space-x-2 pt-2">
                <div class="inline-flex items-center">
                    <input type="checkbox" id="question-@Model.Question.Id-required" name="Questions[@Model.Index].Required" 
                           class="question-required-toggle w-4 h-4 text-primary border-gray-300 rounded focus:ring-primary" 
                           @(Model.Question.Required ? "checked" : "") />
                    <label for="question-@Model.Question.Id-required" class="ml-2 block text-sm font-medium">Required question</label>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model.Question.Settings != null)
{
    <input type="hidden" name="Questions[@Model.Index].Settings.Min" value="@Model.Question.Settings.Min" />
    <input type="hidden" name="Questions[@Model.Index].Settings.Max" value="@Model.Question.Settings.Max" />
}
