
@model SurveyApp.Web.Models.CreateSurveyViewModel
@{
    ViewData["Title"] = Model.Id > 0 ? "Edit Survey" : "Create Survey";
}

<div class="min-h-screen flex flex-col bg-background">
    <div class="flex-1 w-full max-w-7xl mx-auto pt-8 px-6 pb-16">
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold">@ViewData["Title"]</h1>
                <p class="text-muted-foreground">
                    @(Model.Id > 0 
                        ? "Update your existing survey" 
                        : "Design a new survey for your users")
                </p>
            </div>
            
            <div class="flex space-x-3">
                <a asp-controller="Surveys" asp-action="Index" 
                   class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                    Cancel
                </a>
                <button type="submit" form="survey-form"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
                    <svg class="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
                        <polyline points="17 21 17 13 7 13 7 21"></polyline>
                        <polyline points="7 3 7 8 15 8"></polyline>
                    </svg>
                    @(Model.Id > 0 ? "Update Survey" : "Create Survey")
                </button>
            </div>
        </div>
        
        <div x-data="{ activeTab: 'edit' }">
            <div class="flex bg-muted/30 p-1 rounded-lg mb-4">
                <button type="button" 
                        x-on:click="activeTab = 'edit'" 
                        :class="{ 'bg-background shadow': activeTab === 'edit' }"
                        class="flex items-center justify-center w-full rounded-md py-2 px-3 text-sm font-medium transition-all">
                    <svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="12" y1="5" x2="12" y2="19"></line>
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                    </svg>
                    Survey Content
                </button>
                <button type="button" 
                        x-on:click="activeTab = 'delivery'" 
                        :class="{ 'bg-background shadow': activeTab === 'delivery' }"
                        class="flex items-center justify-center w-full rounded-md py-2 px-3 text-sm font-medium transition-all">
                    <svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 2L11 13"></path>
                        <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                    </svg>
                    Delivery Settings
                </button>
            </div>
            
            <form id="survey-form" asp-action="Create" method="post">
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="Status" value="draft" />
                
                <div x-show="activeTab === 'edit'" class="space-y-4">
                    <div class="bg-card rounded-lg border shadow-sm">
                        <div class="p-6">
                            <h2 class="text-lg font-semibold mb-4">Survey Details</h2>
                            
                            <div class="space-y-4">
                                <div>
                                    <label asp-for="Title" class="block text-sm font-medium mb-1">
                                        Title <span class="text-destructive">*</span>
                                    </label>
                                    <input asp-for="Title" 
                                           class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" 
                                           placeholder="Enter survey title" required />
                                    <span asp-validation-for="Title" class="text-sm text-destructive"></span>
                                </div>
                                
                                <div>
                                    <label asp-for="Description" class="block text-sm font-medium mb-1">
                                        Description (optional)
                                    </label>
                                    <textarea asp-for="Description" 
                                              class="flex min-h-[100px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" 
                                              placeholder="Enter a description for your survey"></textarea>
                                    <span asp-validation-for="Description" class="text-sm text-destructive"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-between items-center">
                        <h2 class="text-xl font-semibold">Questions</h2>
                        <div class="flex space-x-2">
                            <button type="button" id="add-sample-questions-btn"
                                    class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                                Add Sample Questions
                            </button>
                            <button type="button" id="add-question-btn"
                                    class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
                                Add Question
                            </button>
                        </div>
                    </div>
                    
                    <div id="questions-container" class="space-y-4">
                        @if (Model.Questions != null && Model.Questions.Count > 0)
                        {
                            @for (var i = 0; i < Model.Questions.Count; i++)
                            {
                                @await Component.InvokeAsync("QuestionBuilder", new { question = Model.Questions[i], index = i })
                            }
                        }
                        else
                        {
                            <div class="bg-card rounded-lg border shadow-sm">
                                <div class="flex flex-col items-center justify-center p-8 text-center">
                                    <div class="rounded-full bg-primary/10 p-4 mb-4">
                                        <svg class="h-6 w-6 text-primary" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                            <polyline points="14 2 14 8 20 8"></polyline>
                                            <line x1="12" y1="18" x2="12" y2="12"></line>
                                            <line x1="9" y1="15" x2="15" y2="15"></line>
                                        </svg>
                                    </div>
                                    <h3 class="text-lg font-semibold mb-1">No questions yet</h3>
                                    <p class="text-muted-foreground mb-4">Add questions to your survey</p>
                                    <button type="button" id="add-first-question-btn"
                                            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
                                        Add First Question
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div x-show="activeTab === 'delivery'" class="space-y-4">
                    <div class="bg-card rounded-lg border shadow-sm">
                        <div class="p-6">
                            <h2 class="text-lg font-semibold mb-4">Delivery Settings</h2>
                            
                            <div x-data="{ deliveryType: '@(Model.DeliveryConfig?.Type ?? "manual")' }">
                                <h3 class="text-base font-medium mb-3">Delivery Method</h3>
                                
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                                    <label class="block">
                                        <input type="radio" name="DeliveryConfig.Type" value="manual" 
                                               x-model="deliveryType" 
                                               class="hidden">
                                        <div class="border rounded-lg p-4 cursor-pointer transition-all"
                                             :class="{ 'border-primary bg-primary/5': deliveryType === 'manual' }">
                                            <div class="flex justify-between items-start mb-2">
                                                <div class="bg-primary/10 text-primary rounded-full p-2">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                                    </svg>
                                                </div>
                                                <div class="w-5 h-5 border rounded-full flex items-center justify-center"
                                                     :class="{ 'border-primary': deliveryType === 'manual' }">
                                                    <div class="w-3 h-3 rounded-full bg-primary"
                                                         x-show="deliveryType === 'manual'"></div>
                                                </div>
                                            </div>
                                            <h4 class="font-medium mb-1">Manual</h4>
                                            <p class="text-sm text-muted-foreground">Send the survey manually to specific emails</p>
                                        </div>
                                    </label>
                                    
                                    <label class="block">
                                        <input type="radio" name="DeliveryConfig.Type" value="scheduled" 
                                               x-model="deliveryType" 
                                               class="hidden">
                                        <div class="border rounded-lg p-4 cursor-pointer transition-all"
                                             :class="{ 'border-primary bg-primary/5': deliveryType === 'scheduled' }">
                                            <div class="flex justify-between items-start mb-2">
                                                <div class="bg-primary/10 text-primary rounded-full p-2">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                    </svg>
                                                </div>
                                                <div class="w-5 h-5 border rounded-full flex items-center justify-center"
                                                     :class="{ 'border-primary': deliveryType === 'scheduled' }">
                                                    <div class="w-3 h-3 rounded-full bg-primary"
                                                         x-show="deliveryType === 'scheduled'"></div>
                                                </div>
                                            </div>
                                            <h4 class="font-medium mb-1">Scheduled</h4>
                                            <p class="text-sm text-muted-foreground">Schedule automatic sends at specific intervals</p>
                                        </div>
                                    </label>
                                    
                                    <label class="block">
                                        <input type="radio" name="DeliveryConfig.Type" value="triggered" 
                                               x-model="deliveryType" 
                                               class="hidden">
                                        <div class="border rounded-lg p-4 cursor-pointer transition-all"
                                             :class="{ 'border-primary bg-primary/5': deliveryType === 'triggered' }">
                                            <div class="flex justify-between items-start mb-2">
                                                <div class="bg-primary/10 text-primary rounded-full p-2">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                                                    </svg>
                                                </div>
                                                <div class="w-5 h-5 border rounded-full flex items-center justify-center"
                                                     :class="{ 'border-primary': deliveryType === 'triggered' }">
                                                    <div class="w-3 h-3 rounded-full bg-primary"
                                                         x-show="deliveryType === 'triggered'"></div>
                                                </div>
                                            </div>
                                            <h4 class="font-medium mb-1">Triggered</h4>
                                            <p class="text-sm text-muted-foreground">Send surveys when specific events occur</p>
                                        </div>
                                    </label>
                                </div>
                                
                                <!-- Email Recipients -->
                                <div class="border-t border-gray-200 pt-6 mt-6">
                                    <h3 class="text-base font-medium mb-3">Email Recipients</h3>
                                    
                                    <div x-data="{ 
                                        newEmail: '', 
                                        emails: @Html.Raw(Json.Serialize(Model.DeliveryConfig?.EmailAddresses ?? new List<string>()))
                                    }">
                                        <div class="flex items-center mb-3">
                                            <input type="text" x-model="newEmail" 
                                                   x-on:keydown.enter.prevent="if(newEmail.trim() && newEmail.includes('@')) { emails.push(newEmail.trim()); newEmail = ''; }" 
                                                   class="flex h-10 w-full rounded-md rounded-r-none border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" 
                                                   placeholder="Add email address">
                                            <button type="button" 
                                                    x-on:click="if(newEmail.trim() && newEmail.includes('@')) { emails.push(newEmail.trim()); newEmail = ''; }"
                                                    class="inline-flex items-center justify-center whitespace-nowrap rounded-md rounded-l-none border-y border-r border-input text-sm font-medium bg-primary text-primary-foreground shadow h-10 px-4 py-2">
                                                Add
                                            </button>
                                        </div>
                                        
                                        <div x-show="emails.length > 0" class="border rounded-md p-3 bg-muted/20 max-h-60 overflow-y-auto">
                                            <template x-for="(email, index) in emails" :key="index">
                                                <div class="flex justify-between items-center py-2 px-3 mb-1 bg-card rounded-md shadow-sm">
                                                    <span x-text="email"></span>
                                                    <button type="button" x-on:click="emails.splice(index, 1)" class="text-destructive hover:text-destructive/90">
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                                        </svg>
                                                    </button>
                                                </div>
                                            </template>
                                        </div>
                                        
                                        <div x-show="emails.length === 0" class="text-muted-foreground text-sm mt-2">
                                            No email addresses added
                                        </div>
                                        
                                        <template x-for="(email, index) in emails" :key="index">
                                            <input type="hidden" :name="'DeliveryConfig.EmailAddresses['+index+']'" :value="email">
                                        </template>
                                    </div>
                                </div>
                                
                                <!-- Scheduled Settings -->
                                <div x-show="deliveryType === 'scheduled'" class="border-t border-gray-200 pt-6 mt-6" id="scheduledSettings">
                                    <h3 class="text-base font-medium mb-3">Schedule Settings</h3>
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium mb-1">Frequency</label>
                                            <select name="DeliveryConfig.Schedule.Frequency" 
                                                    class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                                                <option value="daily" selected="@(Model.DeliveryConfig?.Schedule?.Frequency == "daily")">Daily</option>
                                                <option value="weekly" selected="@(Model.DeliveryConfig?.Schedule?.Frequency == "weekly")">Weekly</option>
                                                <option value="monthly" selected="@(Model.DeliveryConfig?.Schedule?.Frequency == "monthly" || Model.DeliveryConfig?.Schedule == null)">Monthly</option>
                                            </select>
                                        </div>
                                        
                                        <div>
                                            <label class="block text-sm font-medium mb-1">Time</label>
                                            <input type="time" name="DeliveryConfig.Schedule.Time" 
                                                   value="@(Model.DeliveryConfig?.Schedule?.Time ?? "09:00")" 
                                                   class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Trigger Settings -->
                                <div x-show="deliveryType === 'triggered'" class="border-t border-gray-200 pt-6 mt-6" id="triggerSettings">
                                    <h3 class="text-base font-medium mb-3">Trigger Settings</h3>
                                    
                                    <div class="mb-4">
                                        <label class="block text-sm font-medium mb-2">Trigger Event</label>
                                        <div class="space-y-2">
                                            <label class="flex items-center">
                                                <input type="radio" name="DeliveryConfig.Trigger.Type" value="ticket-closed" 
                                                       checked="@(Model.DeliveryConfig?.Trigger?.Type == "ticket-closed" || Model.DeliveryConfig?.Trigger == null)"
                                                       class="mr-2">
                                                <span>When a ticket is closed</span>
                                            </label>
                                            <label class="flex items-center">
                                                <input type="radio" name="DeliveryConfig.Trigger.Type" value="purchase-completed" 
                                                       checked="@(Model.DeliveryConfig?.Trigger?.Type == "purchase-completed")"
                                                       class="mr-2">
                                                <span>After completing a purchase</span>
                                            </label>
                                        </div>
                                    </div>
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium mb-1">Delay (hours)</label>
                                            <input type="number" name="DeliveryConfig.Trigger.DelayHours" 
                                                   value="@(Model.DeliveryConfig?.Trigger?.DelayHours ?? 24)" 
                                                   min="0" max="168"
                                                   class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                                        </div>
                                        
                                        <div class="flex items-center">
                                            <div class="relative inline-flex items-center">
                                                <input type="checkbox" id="send-automatically" name="DeliveryConfig.Trigger.SendAutomatically" 
                                                       value="true" 
                                                       checked="@(Model.DeliveryConfig?.Trigger?.SendAutomatically ?? false)"
                                                       class="sr-only">
                                                <label 
                                                    for="send-automatically" 
                                                    class="bg-gray-200 cursor-pointer relative w-10 h-5 rounded-full flex items-center transition-colors duration-200 ease-in-out
                                                           @(Model.DeliveryConfig?.Trigger?.SendAutomatically ?? false ? "bg-primary" : "")"
                                                >
                                                    <span 
                                                        class="inline-block w-4 h-4 transform translate-x-0.5 rounded-full bg-white transition-transform duration-200 ease-in-out
                                                               @(Model.DeliveryConfig?.Trigger?.SendAutomatically ?? false ? "translate-x-5" : "")"
                                                    ></span>
                                                </label>
                                            </div>
                                            <label for="send-automatically" class="ml-2 cursor-pointer">Send automatically</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 flex justify-end">
                        <button type="button" x-on:click="activeTab = 'edit'"
                                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 mr-2">
                            Back to Questions
                        </button>
                        <button type="submit"
                                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
                            <svg class="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
                                <polyline points="17 21 17 13 7 13 7 21"></polyline>
                                <polyline points="7 3 7 8 15 8"></polyline>
                            </svg>
                            @(Model.Id > 0 ? "Update Survey" : "Create Survey")
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Template for new questions -->
<template id="question-template">
    @await Component.InvokeAsync("QuestionBuilder", new { 
        question = new SurveyApp.Web.Models.QuestionViewModel
        { 
            Id = "new-" + Guid.NewGuid().ToString(), 
            Text = "New Question", 
            Type = "text", 
            Required = true 
        }, 
        index = 0 
    })
</template>

<!-- Template for sample questions -->
<template id="sample-questions-template">
    @await Component.InvokeAsync("QuestionBuilder", new { 
        question = new SurveyApp.Web.Models.QuestionViewModel
        { 
            Id = "new-" + Guid.NewGuid().ToString("N"), 
            Text = "How satisfied are you with our service?", 
            Type = "rating", 
            Required = true 
        }, 
        index = 0 
    })
    
    @await Component.InvokeAsync("QuestionBuilder", new { 
        question = new SurveyApp.Web.Models.QuestionViewModel
        { 
            Id = "new-" + Guid.NewGuid().ToString("N"), 
            Text = "What features do you like most?", 
            Type = "multiple-choice", 
            Required = true,
            Options = new List<string> { "User Interface", "Performance", "Customer Support", "Price" }
        }, 
        index = 0 
    })
    
    @await Component.InvokeAsync("QuestionBuilder", new { 
        question = new SurveyApp.Web.Models.QuestionViewModel
        { 
            Id = "new-" + Guid.NewGuid().ToString("N"), 
            Text = "Please provide any additional feedback", 
            Type = "text", 
            Required = false 
        }, 
        index = 0 
    })
</template>

@section Scripts {
    <script src="~/js/survey-builder.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add first question
            document.getElementById('add-first-question-btn')?.addEventListener('click', function() {
                addNewQuestion();
            });
            
            // Add question button
            document.getElementById('add-question-btn')?.addEventListener('click', function() {
                addNewQuestion();
            });
            
            // Add sample questions
            document.getElementById('add-sample-questions-btn')?.addEventListener('click', function() {
                addSampleQuestions();
            });
            
            function addNewQuestion() {
                const template = document.getElementById('question-template');
                const container = document.getElementById('questions-container');
                const content = template.content.cloneNode(true);
                
                // Remove the empty state if it exists
                const emptyState = container.querySelector('.flex.flex-col.items-center.justify-center');
                if (emptyState) {
                    container.innerHTML = '';
                }
                
                const index = container.querySelectorAll('.question-card').length;
                const questionCard = content.querySelector('.question-card');
                questionCard.dataset.questionIndex = index;
                
                container.appendChild(content);
                initQuestionCard(questionCard);
            }
            
            function addSampleQuestions() {
                const template = document.getElementById('sample-questions-template');
                const container = document.getElementById('questions-container');
                const content = template.content.cloneNode(true);
                
                // Remove the empty state if it exists
                const emptyState = container.querySelector('.flex.flex-col.items-center.justify-center');
                if (emptyState) {
                    container.innerHTML = '';
                }
                
                const startIndex = container.querySelectorAll('.question-card').length;
                const questionCards = content.querySelectorAll('.question-card');
                
                questionCards.forEach((card, i) => {
                    card.dataset.questionIndex = startIndex + i;
                    container.appendChild(card);
                    initQuestionCard(card);
                });
            }
            
            function initQuestionCard(card) {
                // Toggle question content
                const toggleBtn = card.querySelector('.toggle-question-btn');
                const content = card.querySelector('.question-content');
                
                toggleBtn.addEventListener('click', function() {
                    content.classList.toggle('hidden');
                    const chevron = toggleBtn.querySelector('svg');
                    
                    if (content.classList.contains('hidden')) {
                        chevron.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>';
                    } else {
                        chevron.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>';
                    }
                });
                
                // Question type toggle
                const typeToggle = card.querySelector('.question-type-toggle');
                const typeDropdown = card.querySelector('.question-type-dropdown');
                const typeChevron = card.querySelector('.question-type-chevron');
                
                typeToggle?.addEventListener('click', function() {
                    typeDropdown.classList.toggle('hidden');
                    typeChevron.classList.toggle('rotate-180');
                });
                
                // Question type options
                const typeOptions = card.querySelectorAll('.question-type-option');
                typeOptions.forEach(option => {
                    option.addEventListener('click', function() {
                        const type = this.dataset.type;
                        const questionId = card.dataset.questionId;
                        
                        // Update selected status
                        typeOptions.forEach(opt => opt.classList.remove('selected'));
                        this.classList.add('selected');
                        
                        // Update question type in the view
                        typeToggle.querySelector('span span').textContent = type.replace('-', ' ');
                        
                        // Hide dropdown
                        typeDropdown.classList.add('hidden');
                        typeChevron.classList.remove('rotate-180');
                        
                        // Update options container visibility
                        const optionsContainer = card.querySelector('.question-options-container');
                        if (optionsContainer) {
                            if (['multiple-choice', 'single-choice', 'dropdown', 'ranking'].includes(type)) {
                                optionsContainer.classList.remove('hidden');
                                
                                // Add default options if none exist
                                if (optionsContainer.querySelectorAll('.option-item').length === 0) {
                                    const optionsList = optionsContainer.querySelector('.options-list') || document.createElement('div');
                                    optionsList.classList.add('options-list');
                                    optionsList.innerHTML = `
                                        <div class="option-item flex items-center gap-2 mb-2">
                                            <div class="flex-1">
                                                <input type="text" class="option-input w-full border rounded-md py-2 px-3" value="Option 1" data-option-index="0" data-question-id="${questionId}">
                                            </div>
                                            <button type="button" class="option-remove p-1 h-9 w-9 rounded-md" data-option-index="0" data-question-id="${questionId}" disabled>
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        </div>
                                        <div class="option-item flex items-center gap-2 mb-2">
                                            <div class="flex-1">
                                                <input type="text" class="option-input w-full border rounded-md py-2 px-3" value="Option 2" data-option-index="1" data-question-id="${questionId}">
                                            </div>
                                            <button type="button" class="option-remove p-1 h-9 w-9 rounded-md" data-option-index="1" data-question-id="${questionId}" disabled>
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        </div>
                                    `;
                                    
                                    if (!optionsContainer.contains(optionsList)) {
                                        optionsContainer.insertBefore(optionsList, optionsContainer.querySelector('.add-option-btn'));
                                    }
                                }
                            } else {
                                optionsContainer.classList.add('hidden');
                            }
                        }
                        
                        // Update special previews
                        const ratingPreview = card.querySelector('.rating-preview');
                        const npsPreview = card.querySelector('.nps-preview');
                        
                        if (ratingPreview) {
                            ratingPreview.classList.toggle('hidden', type !== 'rating');
                        }
                        
                        if (npsPreview) {
                            npsPreview.classList.toggle('hidden', type !== 'nps');
                        }
                    });
                });
                
                // Delete question
                const deleteBtn = card.querySelector('.delete-question-btn');
                deleteBtn.addEventListener('click', function() {
                    if (confirm('Are you sure you want to delete this question?')) {
                        card.remove();
                        updateQuestionIndices();
                        
                        // Show empty state if no questions remain
                        const container = document.getElementById('questions-container');
                        if (container.querySelectorAll('.question-card').length === 0) {
                            container.innerHTML = `
                                <div class="bg-card rounded-lg border shadow-sm">
                                    <div class="flex flex-col items-center justify-center p-8 text-center">
                                        <div class="rounded-full bg-primary/10 p-4 mb-4">
                                            <svg class="h-6 w-6 text-primary" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                                <polyline points="14 2 14 8 20 8"></polyline>
                                                <line x1="12" y1="18" x2="12" y2="12"></line>
                                                <line x1="9" y1="15" x2="15" y2="15"></line>
                                            </svg>
                                        </div>
                                        <h3 class="text-lg font-semibold mb-1">No questions yet</h3>
                                        <p class="text-muted-foreground mb-4">Add questions to your survey</p>
                                        <button type="button" id="add-first-question-btn"
                                                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
                                            Add First Question
                                        </button>
                                    </div>
                                </div>
                            `;
                            
                            document.getElementById('add-first-question-btn').addEventListener('click', function() {
                                addNewQuestion();
                            });
                        }
                    }
                });
                
                // Move up/down
                const moveUpBtn = card.querySelector('.move-up-btn');
                const moveDownBtn = card.querySelector('.move-down-btn');
                
                moveUpBtn.addEventListener('click', function() {
                    const index = parseInt(card.dataset.questionIndex);
                    if (index > 0) {
                        const container = document.getElementById('questions-container');
                        const cards = container.querySelectorAll('.question-card');
                        const prevCard = cards[index - 1];
                        
                        container.insertBefore(card, prevCard);
                        updateQuestionIndices();
                    }
                });
                
                moveDownBtn.addEventListener('click', function() {
                    const index = parseInt(card.dataset.questionIndex);
                    const container = document.getElementById('questions-container');
                    const cards = container.querySelectorAll('.question-card');
                    
                    if (index < cards.length - 1) {
                        const nextCard = cards[index + 1];
                        container.insertBefore(nextCard, card);
                        updateQuestionIndices();
                    }
                });
                
                // Add option
                const addOptionBtn = card.querySelector('.add-option-btn');
                addOptionBtn?.addEventListener('click', function() {
                    const questionId = this.dataset.questionId;
                    const optionsList = card.querySelector('.options-list');
                    const optionItems = optionsList.querySelectorAll('.option-item');
                    const newIndex = optionItems.length;
                    
                    const newOption = document.createElement('div');
                    newOption.className = 'option-item flex items-center gap-2 mb-2';
                    newOption.innerHTML = `
                        <div class="flex-1">
                            <input type="text" class="option-input w-full border rounded-md py-2 px-3" value="New option" data-option-index="${newIndex}" data-question-id="${questionId}">
                        </div>
                        <button type="button" class="option-remove p-1 h-9 w-9 rounded-md text-muted-foreground hover:text-red-500" data-option-index="${newIndex}" data-question-id="${questionId}">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                    `;
                    
                    optionsList.appendChild(newOption);
                    updateRemoveOptionButtons(card);
                    
                    // Add event listener to new remove button
                    const removeBtn = newOption.querySelector('.option-remove');
                    removeBtn.addEventListener('click', function() {
                        newOption.remove();
                        updateOptionIndices(card);
                        updateRemoveOptionButtons(card);
                    });
                });
                
                // Remove option - add event listeners to existing buttons
                const removeOptionBtns = card.querySelectorAll('.option-remove');
                removeOptionBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        if (!this.disabled) {
                            const optionItem = this.closest('.option-item');
                            optionItem.remove();
                            updateOptionIndices(card);
                            updateRemoveOptionButtons(card);
                        }
                    });
                });
                
                // Required toggle
                const requiredToggle = card.querySelector('.question-required-toggle');
                requiredToggle.addEventListener('change', function() {
                    const label = this.closest('label');
                    label.classList.toggle('bg-primary', this.checked);
                    const span = label.querySelector('span');
                    span.classList.toggle('translate-x-5', this.checked);
                    span.classList.toggle('translate-x-0.5', !this.checked);
                });
                
                function updateOptionIndices(card) {
                    const optionInputs = card.querySelectorAll('.option-input');
                    const optionRemoveBtns = card.querySelectorAll('.option-remove');
                    
                    optionInputs.forEach((input, index) => {
                        input.dataset.optionIndex = index;
                    });
                    
                    optionRemoveBtns.forEach((btn, index) => {
                        btn.dataset.optionIndex = index;
                    });
                }
                
                function updateRemoveOptionButtons(card) {
                    const optionItems = card.querySelectorAll('.option-item');
                    const removeBtns = card.querySelectorAll('.option-remove');
                    
                    removeBtns.forEach(btn => {
                        btn.disabled = optionItems.length <= 2;
                        btn.classList.toggle('opacity-50', optionItems.length <= 2);
                    });
                }
            }
            
            function updateQuestionIndices() {
                const container = document.getElementById('questions-container');
                const cards = container.querySelectorAll('.question-card');
                
                cards.forEach((card, index) => {
                    card.dataset.questionIndex = index;
                    
                    // Update move buttons
                    const moveUpBtn = card.querySelector('.move-up-btn');
                    const moveDownBtn = card.querySelector('.move-down-btn');
                    
                    moveUpBtn.disabled = index === 0;
                    moveDownBtn.disabled = index === cards.length - 1;
                });
            }
            
            // Initialize all question cards
            document.querySelectorAll('.question-card').forEach(card => {
                initQuestionCard(card);
            });
        });
    </script>
}
