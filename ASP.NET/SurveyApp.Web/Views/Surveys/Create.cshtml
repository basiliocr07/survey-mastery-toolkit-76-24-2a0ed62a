
@model SurveyApp.Web.Models.CreateSurveyViewModel
@{
    ViewData["Title"] = "Create Survey";
    var showTabs = Model.Id > 0;
}

<div class="container mx-auto px-4 py-8 max-w-5xl">
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold">@(Model.Id > 0 ? "Edit Survey" : "Create Survey")</h1>
            <p class="text-muted-foreground">
                @(Model.Id > 0 ? "Update your existing survey" : "Design a new survey for your users")
            </p>
        </div>
        
        <div class="flex gap-3">
            <a href="@Url.Action("Index")" class="bg-white hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 border border-gray-300 rounded-md shadow-sm focus:outline-none">
                Cancel
            </a>
            <button type="submit" form="surveyForm" class="bg-primary hover:bg-primary-dark text-white font-medium py-2 px-4 rounded-md shadow-sm focus:outline-none flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                @(Model.Id > 0 ? "Update Survey" : "Create Survey")
            </button>
        </div>
    </div>

    <div class="survey-tabs mb-6">
        <div class="border-b">
            <div class="flex">
                <button type="button" id="tab-content" class="tab-button active" data-tab="survey-content">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Survey Content
                </button>
                <button type="button" id="tab-delivery" class="tab-button" data-tab="delivery-settings">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                    Delivery Settings
                </button>
            </div>
        </div>
    </div>

    <form id="surveyForm" asp-action="Create" method="post" class="space-y-6">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="Status" value="@Model.Status" />
        
        <div id="survey-content" class="tab-content">
            <div class="bg-white rounded-lg shadow-sm p-6 mb-6 border">
                <h2 class="text-xl font-bold mb-4">Survey Details</h2>
                
                <div class="mb-4">
                    <label asp-for="Title" class="block text-sm font-medium mb-1">Title <span class="text-red-500">*</span></label>
                    <input asp-for="Title" class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20" placeholder="Enter survey title" />
                    <span asp-validation-for="Title" class="text-red-500 text-sm"></span>
                </div>
                
                <div class="mb-4">
                    <label asp-for="Description" class="block text-sm font-medium mb-1">Description (optional)</label>
                    <textarea asp-for="Description" rows="3" class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20" placeholder="Provide a description for your survey"></textarea>
                    <span asp-validation-for="Description" class="text-red-500 text-sm"></span>
                </div>
            </div>

            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold">Questions</h2>
                <div class="flex gap-2">
                    <button type="button" id="addSampleQuestions" class="bg-white hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 border border-gray-300 rounded-md shadow-sm focus:outline-none">
                        Add Sample Questions
                    </button>
                    <button type="button" id="addQuestion" class="bg-primary hover:bg-primary-dark text-white font-medium py-2 px-4 rounded-md shadow-sm focus:outline-none">
                        Add Question
                    </button>
                </div>
            </div>

            <div id="questionsContainer" class="space-y-4">
                @if (Model.Questions.Count == 0)
                {
                    <div id="empty-questions-state" class="empty-state">
                        <div class="empty-state-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                        </div>
                        <h3 class="text-lg font-semibold mb-1">No questions yet</h3>
                        <p class="text-gray-500 mb-4">Add questions to your survey</p>
                        <button type="button" id="addFirstQuestion" class="bg-primary hover:bg-primary-dark text-white font-medium py-2 px-4 rounded-md shadow-sm focus:outline-none">
                            Add First Question
                        </button>
                    </div>
                }
                else
                {
                    @for (var i = 0; i < Model.Questions.Count; i++)
                    {
                        @await Html.PartialAsync("_QuestionBuilderPartial", new Tuple<QuestionViewModel, int, int>(Model.Questions[i], i, Model.Questions.Count))
                    }
                }
            </div>
        </div>

        <div id="delivery-settings" class="tab-content hidden">
            <div class="bg-white rounded-lg shadow-sm p-6 border">
                <h2 class="text-xl font-bold mb-4">Delivery Method</h2>
                
                <div class="delivery-tabs">
                    <label class="flex items-center">
                        <input type="radio" name="DeliveryConfig.Type" value="manual" @(Model.DeliveryConfig?.Type == "manual" ? "checked" : "") class="hidden" />
                        <div class="delivery-type @(Model.DeliveryConfig?.Type == "manual" ? "border-primary bg-primary-50" : "")">
                            <div class="font-medium mb-1">Manual</div>
                            <div class="text-sm text-gray-500">Send manually to specific people</div>
                        </div>
                    </label>
                    
                    <label class="flex items-center">
                        <input type="radio" name="DeliveryConfig.Type" value="scheduled" @(Model.DeliveryConfig?.Type == "scheduled" ? "checked" : "") class="hidden" />
                        <div class="delivery-type @(Model.DeliveryConfig?.Type == "scheduled" ? "border-primary bg-primary-50" : "")">
                            <div class="font-medium mb-1">Scheduled</div>
                            <div class="text-sm text-gray-500">Send on a repeating schedule</div>
                        </div>
                    </label>
                    
                    <label class="flex items-center">
                        <input type="radio" name="DeliveryConfig.Type" value="triggered" @(Model.DeliveryConfig?.Type == "triggered" ? "checked" : "") class="hidden" />
                        <div class="delivery-type @(Model.DeliveryConfig?.Type == "triggered" ? "border-primary bg-primary-50" : "")">
                            <div class="font-medium mb-1">Triggered</div>
                            <div class="text-sm text-gray-500">Send after specific events</div>
                        </div>
                    </label>
                </div>

                <div id="delivery-sections" class="mt-6">
                    <div id="manual-settings" class="settings-section @(Model.DeliveryConfig?.Type != "manual" ? "hidden" : "")">
                        <p class="text-gray-500 mb-4">
                            Send this survey manually to specific email addresses.
                        </p>
                    </div>
                    
                    <div id="scheduled-settings" class="settings-section @(Model.DeliveryConfig?.Type != "scheduled" ? "hidden" : "")">
                        <p class="text-gray-500 mb-4">
                            Schedule this survey to be sent automatically at regular intervals.
                        </p>
                        
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-1">Frequency</label>
                                <select name="DeliveryConfig.Schedule.Frequency" class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20">
                                    <option value="daily" @(Model.DeliveryConfig?.Schedule?.Frequency == "daily" ? "selected" : "")>Daily</option>
                                    <option value="weekly" @(Model.DeliveryConfig?.Schedule?.Frequency == "weekly" ? "selected" : "")>Weekly</option>
                                    <option value="monthly" @(Model.DeliveryConfig?.Schedule?.Frequency == "monthly" ? "selected" : "")>Monthly</option>
                                </select>
                            </div>
                            
                            <div id="monthly-settings" class="@(Model.DeliveryConfig?.Schedule?.Frequency != "monthly" ? "hidden" : "")">
                                <label class="block text-sm font-medium mb-1">Day of Month</label>
                                <select name="DeliveryConfig.Schedule.DayOfMonth" class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20">
                                    @for (var i = 1; i <= 31; i++)
                                    {
                                        <option value="@i" @(Model.DeliveryConfig?.Schedule?.DayOfMonth == i ? "selected" : "")>@i</option>
                                    }
                                </select>
                            </div>
                            
                            <div id="weekly-settings" class="@(Model.DeliveryConfig?.Schedule?.Frequency != "weekly" ? "hidden" : "")">
                                <label class="block text-sm font-medium mb-1">Day of Week</label>
                                <select name="DeliveryConfig.Schedule.DayOfWeek" class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20">
                                    <option value="1" @(Model.DeliveryConfig?.Schedule?.DayOfWeek == 1 ? "selected" : "")>Monday</option>
                                    <option value="2" @(Model.DeliveryConfig?.Schedule?.DayOfWeek == 2 ? "selected" : "")>Tuesday</option>
                                    <option value="3" @(Model.DeliveryConfig?.Schedule?.DayOfWeek == 3 ? "selected" : "")>Wednesday</option>
                                    <option value="4" @(Model.DeliveryConfig?.Schedule?.DayOfWeek == 4 ? "selected" : "")>Thursday</option>
                                    <option value="5" @(Model.DeliveryConfig?.Schedule?.DayOfWeek == 5 ? "selected" : "")>Friday</option>
                                    <option value="6" @(Model.DeliveryConfig?.Schedule?.DayOfWeek == 6 ? "selected" : "")>Saturday</option>
                                    <option value="0" @(Model.DeliveryConfig?.Schedule?.DayOfWeek == 0 ? "selected" : "")>Sunday</option>
                                </select>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium mb-1">Time</label>
                                <input type="time" name="DeliveryConfig.Schedule.Time" value="@(Model.DeliveryConfig?.Schedule?.Time ?? "09:00")" 
                                       class="w-40 rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20" />
                            </div>
                        </div>
                    </div>
                    
                    <div id="triggered-settings" class="settings-section @(Model.DeliveryConfig?.Type != "triggered" ? "hidden" : "")">
                        <p class="text-gray-500 mb-4">
                            Send this survey when specific events occur in your system.
                        </p>
                        
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Trigger Event</label>
                                <div class="space-y-2">
                                    <label class="flex items-center space-x-2">
                                        <input type="radio" name="DeliveryConfig.Trigger.Type" value="ticket-closed" 
                                               @(Model.DeliveryConfig?.Trigger?.Type == "ticket-closed" ? "checked" : "") 
                                               class="rounded-full text-primary focus:ring-primary" />
                                        <span>After ticket is closed</span>
                                    </label>
                                    <label class="flex items-center space-x-2">
                                        <input type="radio" name="DeliveryConfig.Trigger.Type" value="purchase-completed" 
                                               @(Model.DeliveryConfig?.Trigger?.Type == "purchase-completed" ? "checked" : "") 
                                               class="rounded-full text-primary focus:ring-primary" />
                                        <span>After purchase is completed</span>
                                    </label>
                                </div>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium mb-1">Delay (hours)</label>
                                <input type="number" name="DeliveryConfig.Trigger.DelayHours" min="0" max="168" 
                                       value="@(Model.DeliveryConfig?.Trigger?.DelayHours ?? 24)" 
                                       class="w-24 rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20" />
                            </div>
                            
                            <div>
                                <label class="flex items-center space-x-2">
                                    <input type="checkbox" name="DeliveryConfig.Trigger.SendAutomatically" 
                                           @(Model.DeliveryConfig?.Trigger?.SendAutomatically == true ? "checked" : "") 
                                           class="rounded text-primary focus:ring-primary" />
                                    <span>Send automatically</span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6 pt-6 border-t">
                    <h3 class="text-lg font-medium mb-3">Email Recipients</h3>
                    
                    <div class="space-y-4">
                        <div class="flex gap-2">
                            <input type="text" id="emailInput" placeholder="Enter email address" 
                                   class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-20" />
                            <button type="button" id="addEmail" class="bg-white hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 border border-gray-300 rounded-md shadow-sm focus:outline-none">
                                Add
                            </button>
                        </div>
                        
                        <div id="emailError" class="text-red-500 text-sm hidden">Please enter a valid email address</div>
                        
                        <div id="emailsContainer" class="border rounded-lg p-4 @(Model.DeliveryConfig?.EmailAddresses?.Count > 0 ? "" : "hidden")">
                            <ul id="emailsList" class="space-y-2">
                                @if (Model.DeliveryConfig?.EmailAddresses != null)
                                {
                                    @foreach (var email in Model.DeliveryConfig.EmailAddresses)
                                    {
                                        <li class="email-recipient">
                                            <span>@email</span>
                                            <input type="hidden" name="DeliveryConfig.EmailAddresses" value="@email" />
                                            <button type="button" class="remove-email" data-email="@email">&times;</button>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                        
                        <div id="noEmailsMessage" class="text-gray-500 text-sm @(Model.DeliveryConfig?.EmailAddresses?.Count > 0 ? "hidden" : "")">
                            No email addresses added yet.
                        </div>
                    </div>
                </div>

                <div class="mt-6 flex justify-end">
                    <button type="button" id="back-to-content" class="bg-white hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 border border-gray-300 rounded-md shadow-sm focus:outline-none mr-2">
                        Back to Questions
                    </button>
                    <button type="submit" class="bg-primary hover:bg-primary-dark text-white font-medium py-2 px-4 rounded-md shadow-sm focus:outline-none flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        @(Model.Id > 0 ? "Update Survey" : "Create Survey")
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab navigation
            const tabs = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const target = this.dataset.tab;
                    
                    // Update active tab
                    tabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Show/hide tab content
                    tabContents.forEach(content => {
                        content.classList.add('hidden');
                        if (content.id === target) {
                            content.classList.remove('hidden');
                        }
                    });
                });
            });
            
            // Add question button
            const addQuestionBtn = document.getElementById('addQuestion');
            const addFirstQuestionBtn = document.getElementById('addFirstQuestion');
            const questionsContainer = document.getElementById('questionsContainer');
            const emptyQuestionsState = document.getElementById('empty-questions-state');
            
            function addQuestion() {
                const questionCount = document.querySelectorAll('.question-card').length;
                const questionId = `new-${Date.now()}`;
                
                fetch(`/Surveys/AddQuestion?index=${questionCount}&id=${questionId}`)
                    .then(response => response.text())
                    .then(html => {
                        if (emptyQuestionsState) {
                            emptyQuestionsState.remove();
                        }
                        
                        questionsContainer.insertAdjacentHTML('beforeend', html);
                        initQuestionCard(document.querySelector(`#question_${questionCount}`));
                    });
            }
            
            if (addQuestionBtn) {
                addQuestionBtn.addEventListener('click', addQuestion);
            }
            
            if (addFirstQuestionBtn) {
                addFirstQuestionBtn.addEventListener('click', addQuestion);
            }
            
            // Add sample questions button
            const addSampleQuestionsBtn = document.getElementById('addSampleQuestions');
            
            if (addSampleQuestionsBtn) {
                addSampleQuestionsBtn.addEventListener('click', function() {
                    const questionCount = document.querySelectorAll('.question-card').length;
                    
                    fetch(`/Surveys/AddSampleQuestions?startIndex=${questionCount}`)
                        .then(response => response.text())
                        .then(html => {
                            if (emptyQuestionsState) {
                                emptyQuestionsState.remove();
                            }
                            
                            questionsContainer.insertAdjacentHTML('beforeend', html);
                            document.querySelectorAll('.question-card').forEach(initQuestionCard);
                        });
                });
            }
            
            // Back to content button
            const backToContentBtn = document.getElementById('back-to-content');
            
            if (backToContentBtn) {
                backToContentBtn.addEventListener('click', function() {
                    document.getElementById('tab-content').click();
                });
            }
            
            // Initialize existing question cards
            document.querySelectorAll('.question-card').forEach(initQuestionCard);
            
            // Initialize question card functionality
            function initQuestionCard(card) {
                if (!card) return;
                
                const cardIndex = card.dataset.questionIndex;
                const toggleBtn = card.querySelector('.toggle-question-btn');
                const content = card.querySelector('.question-content');
                const deleteBtn = card.querySelector('.delete-question-btn');
                const typeToggle = card.querySelector('.question-type-toggle');
                const typesDropdown = card.querySelector('.question-types-dropdown');
                const typeOptions = card.querySelectorAll('.question-type-option');
                const addOptionBtn = card.querySelector('.add-option-btn');
                const optionsList = card.querySelector(`#optionsList_${cardIndex}`);
                
                // Toggle question collapse/expand
                if (toggleBtn && content) {
                    toggleBtn.addEventListener('click', function() {
                        content.classList.toggle('hidden');
                        const icon = toggleBtn.querySelector('svg');
                        if (icon) {
                            if (content.classList.contains('hidden')) {
                                icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />';
                            } else {
                                icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />';
                            }
                        }
                    });
                }
                
                // Delete question
                if (deleteBtn) {
                    deleteBtn.addEventListener('click', function() {
                        if (confirm('Are you sure you want to delete this question?')) {
                            card.remove();
                            
                            // Update indices for remaining questions
                            document.querySelectorAll('.question-card').forEach((c, i) => {
                                const inputs = c.querySelectorAll('input, textarea, select');
                                inputs.forEach(input => {
                                    if (input.name) {
                                        input.name = input.name.replace(/Questions\[\d+\]/, `Questions[${i}]`);
                                    }
                                });
                                
                                // Update question card index data attribute
                                c.dataset.questionIndex = i;
                            });
                            
                            // Show empty state if no questions left
                            if (document.querySelectorAll('.question-card').length === 0) {
                                questionsContainer.innerHTML = `
                                    <div id="empty-questions-state" class="empty-state">
                                        <div class="empty-state-icon">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                            </svg>
                                        </div>
                                        <h3 class="text-lg font-semibold mb-1">No questions yet</h3>
                                        <p class="text-gray-500 mb-4">Add questions to your survey</p>
                                        <button type="button" id="addFirstQuestion" class="bg-primary hover:bg-primary-dark text-white font-medium py-2 px-4 rounded-md shadow-sm focus:outline-none">
                                            Add First Question
                                        </button>
                                    </div>
                                `;
                                document.getElementById('addFirstQuestion').addEventListener('click', addQuestion);
                            }
                        }
                    });
                }
                
                // Question type dropdown
                if (typeToggle && typesDropdown) {
                    typeToggle.addEventListener('click', function() {
                        typesDropdown.classList.toggle('hidden');
                        const icon = typeToggle.querySelector('svg');
                        if (icon) {
                            icon.style.transform = typesDropdown.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
                        }
                    });
                    
                    // Close dropdown when clicking outside
                    document.addEventListener('click', function(e) {
                        if (!typeToggle.contains(e.target) && !typesDropdown.contains(e.target)) {
                            typesDropdown.classList.add('hidden');
                            const icon = typeToggle.querySelector('svg');
                            if (icon) {
                                icon.style.transform = 'rotate(0deg)';
                            }
                        }
                    });
                }
                
                // Question type selection
                if (typeOptions) {
                    typeOptions.forEach(option => {
                        option.addEventListener('click', function() {
                            const questionType = this.dataset.type;
                            const optionsDiv = card.querySelector(`#options_${cardIndex}`);
                            const ratingDiv = card.querySelector(`#rating_${cardIndex}`);
                            const npsDiv = card.querySelector(`#nps_${cardIndex}`);
                            
                            // Update type text
                            const typeText = typeToggle.querySelector('span span');
                            if (typeText) {
                                typeText.textContent = questionType.replace('-', ' ');
                            }
                            
                            // Update hidden input for question type
                            const typeInput = document.createElement('input');
                            typeInput.type = 'hidden';
                            typeInput.name = `Questions[${cardIndex}].Type`;
                            typeInput.value = questionType;
                            
                            // Remove existing type input if any
                            const existingTypeInput = card.querySelector(`input[name="Questions[${cardIndex}].Type"]`);
                            if (existingTypeInput) {
                                existingTypeInput.remove();
                            }
                            
                            card.appendChild(typeInput);
                            
                            // Show/hide options based on question type
                            if (optionsDiv) {
                                optionsDiv.classList.toggle('hidden', !['multiple-choice', 'single-choice', 'dropdown', 'ranking'].includes(questionType));
                            }
                            
                            if (ratingDiv) {
                                ratingDiv.classList.toggle('hidden', questionType !== 'rating');
                            }
                            
                            if (npsDiv) {
                                npsDiv.classList.toggle('hidden', questionType !== 'nps');
                            }
                            
                            // Add default options if needed
                            if (['multiple-choice', 'single-choice', 'dropdown', 'ranking'].includes(questionType) && (!optionsList || optionsList.children.length === 0)) {
                                if (optionsList) {
                                    optionsList.innerHTML = `
                                        <div class="option-item flex items-center gap-2">
                                            <input type="text" name="Questions[${cardIndex}].Options[0]" value="Option 1" 
                                                class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" />
                                            <button type="button" class="remove-option-btn text-gray-500 hover:text-red-500 p-1 rounded-full" 
                                                    data-question-id="${cardIndex}" data-option-index="0">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                            </button>
                                        </div>
                                        <div class="option-item flex items-center gap-2">
                                            <input type="text" name="Questions[${cardIndex}].Options[1]" value="Option 2" 
                                                class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" />
                                            <button type="button" class="remove-option-btn text-gray-500 hover:text-red-500 p-1 rounded-full" 
                                                    data-question-id="${cardIndex}" data-option-index="1">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                            </button>
                                        </div>
                                    `;
                                    
                                    // Initialize remove option buttons
                                    optionsList.querySelectorAll('.remove-option-btn').forEach(initRemoveOptionBtn);
                                }
                            }
                            
                            // Update selected state in options
                            typeOptions.forEach(opt => {
                                opt.classList.toggle('selected', opt.dataset.type === questionType);
                            });
                            
                            // Hide dropdown
                            typesDropdown.classList.add('hidden');
                            const icon = typeToggle.querySelector('svg');
                            if (icon) {
                                icon.style.transform = 'rotate(0deg)';
                            }
                        });
                    });
                }
                
                // Add option button
                if (addOptionBtn && optionsList) {
                    addOptionBtn.addEventListener('click', function() {
                        const optionCount = optionsList.querySelectorAll('.option-item').length;
                        const newOption = document.createElement('div');
                        newOption.className = 'option-item flex items-center gap-2';
                        newOption.innerHTML = `
                            <input type="text" name="Questions[${cardIndex}].Options[${optionCount}]" value="New option" 
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary" />
                            <button type="button" class="remove-option-btn text-gray-500 hover:text-red-500 p-1 rounded-full" 
                                    data-question-id="${cardIndex}" data-option-index="${optionCount}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        `;
                        
                        optionsList.appendChild(newOption);
                        initRemoveOptionBtn(newOption.querySelector('.remove-option-btn'));
                    });
                }
                
                // Remove option buttons
                card.querySelectorAll('.remove-option-btn').forEach(initRemoveOptionBtn);
                
                function initRemoveOptionBtn(btn) {
                    if (!btn) return;
                    
                    btn.addEventListener('click', function() {
                        const questionId = this.dataset.questionId;
                        const optionsList = document.querySelector(`#optionsList_${questionId}`);
                        const options = optionsList.querySelectorAll('.option-item');
                        
                        if (options.length <= 2) {
                            alert('A choice question must have at least 2 options.');
                            return;
                        }
                        
                        this.closest('.option-item').remove();
                        
                        // Update indices for remaining options
                        optionsList.querySelectorAll('.option-item').forEach((item, i) => {
                            const input = item.querySelector('input');
                            const removeBtn = item.querySelector('.remove-option-btn');
                            
                            if (input) {
                                input.name = `Questions[${questionId}].Options[${i}]`;
                            }
                            
                            if (removeBtn) {
                                removeBtn.dataset.optionIndex = i;
                            }
                        });
                    });
                }
            }
            
            // Delivery method selection
            const deliveryTypeInputs = document.querySelectorAll('input[name="DeliveryConfig.Type"]');
            const deliverySections = {
                'manual': document.getElementById('manual-settings'),
                'scheduled': document.getElementById('scheduled-settings'),
                'triggered': document.getElementById('triggered-settings')
            };
            
            deliveryTypeInputs.forEach(input => {
                input.addEventListener('change', function() {
                    // Update styling for delivery type boxes
                    deliveryTypeInputs.forEach(inp => {
                        const box = inp.nextElementSibling;
                        if (box) {
                            if (inp.checked) {
                                box.classList.add('border-primary', 'bg-primary-50');
                            } else {
                                box.classList.remove('border-primary', 'bg-primary-50');
                            }
                        }
                    });
                    
                    // Show/hide delivery sections
                    Object.keys(deliverySections).forEach(type => {
                        if (deliverySections[type]) {
                            deliverySections[type].classList.toggle('hidden', type !== this.value);
                        }
                    });
                });
            });
            
            // Schedule frequency settings
            const frequencySelect = document.querySelector('select[name="DeliveryConfig.Schedule.Frequency"]');
            const monthlySettings = document.getElementById('monthly-settings');
            const weeklySettings = document.getElementById('weekly-settings');
            
            if (frequencySelect) {
                frequencySelect.addEventListener('change', function() {
                    if (monthlySettings) {
                        monthlySettings.classList.toggle('hidden', this.value !== 'monthly');
                    }
                    
                    if (weeklySettings) {
                        weeklySettings.classList.toggle('hidden', this.value !== 'weekly');
                    }
                });
            }
            
            // Email management
            const emailInput = document.getElementById('emailInput');
            const addEmailBtn = document.getElementById('addEmail');
            const emailsContainer = document.getElementById('emailsContainer');
            const emailsList = document.getElementById('emailsList');
            const noEmailsMessage = document.getElementById('noEmailsMessage');
            const emailError = document.getElementById('emailError');
            
            function isValidEmail(email) {
                return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
            }
            
            function addEmail() {
                if (!emailInput || !emailInput.value.trim()) return;
                
                const email = emailInput.value.trim();
                
                if (!isValidEmail(email)) {
                    if (emailError) emailError.classList.remove('hidden');
                    return;
                }
                
                if (emailError) emailError.classList.add('hidden');
                
                // Check if email already exists
                const existingEmails = Array.from(document.querySelectorAll('input[name="DeliveryConfig.EmailAddresses"]')).map(input => input.value);
                if (existingEmails.includes(email)) {
                    emailInput.value = '';
                    return;
                }
                
                const emailItem = document.createElement('li');
                emailItem.className = 'email-recipient';
                emailItem.innerHTML = `
                    <span>${email}</span>
                    <input type="hidden" name="DeliveryConfig.EmailAddresses" value="${email}" />
                    <button type="button" class="remove-email" data-email="${email}">&times;</button>
                `;
                
                emailsList.appendChild(emailItem);
                emailInput.value = '';
                
                // Show email container, hide no emails message
                if (emailsContainer) emailsContainer.classList.remove('hidden');
                if (noEmailsMessage) noEmailsMessage.classList.add('hidden');
                
                // Initialize remove button
                initRemoveEmailBtn(emailItem.querySelector('.remove-email'));
            }
            
            if (addEmailBtn) {
                addEmailBtn.addEventListener('click', addEmail);
            }
            
            if (emailInput) {
                emailInput.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        addEmail();
                    }
                    
                    if (emailError && !emailError.classList.contains('hidden')) {
                        emailError.classList.add('hidden');
                    }
                });
            }
            
            // Initialize existing remove email buttons
            document.querySelectorAll('.remove-email').forEach(initRemoveEmailBtn);
            
            function initRemoveEmailBtn(btn) {
                if (!btn) return;
                
                btn.addEventListener('click', function() {
                    this.closest('.email-recipient').remove();
                    
                    // Show/hide elements based on remaining emails
                    const remainingEmails = document.querySelectorAll('.email-recipient').length;
                    
                    if (remainingEmails === 0) {
                        if (emailsContainer) emailsContainer.classList.add('hidden');
                        if (noEmailsMessage) noEmailsMessage.classList.remove('hidden');
                    }
                });
            }
        });
    </script>
}
